# -*- coding: utf-8 -*-
"""Copy of ML_OEA_finalfinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PuYRDrE0kSBhAjeVHU7p66UlWiAYceMV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
import pydotplus
from six import StringIO
from IPython.display import Image

# --- Load Data ---
df = pd.read_csv('imdb_top_1000.csv')

# --- SAME PREPROCESSING AS LOGISTIC REGRESSION ---
df = df.drop(['Poster_Link', 'Series_Title', 'Overview'], axis=1)

df = df.fillna(0)
df.fillna("Unknown", inplace=True)

child_friendly = ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'U']
df['is_child_friendly'] = df['Certificate'].apply(lambda x: 1 if x in child_friendly else 0)

X = df.drop(['is_child_friendly','Certificate'], axis=1)
y = df['is_child_friendly']

X['Runtime'] = X['Runtime'].astype(str).str.extract('(\d+)').astype(float)
X['Released_Year'] = pd.to_numeric(X['Released_Year'], errors='coerce')
X['Gross'] = X['Gross'].astype(str).str.replace(',', '').str.replace('$', '').astype(float)

X_encoded = pd.get_dummies(X, drop_first=True)

# --- TRAIN / TEST SPLIT ---
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# --- DECISION TREE ---
classifier = DecisionTreeClassifier(random_state=42)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

# --- METRICS ---
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

# --- VISUALIZE DECISION TREE ---
feature_names = list(X_encoded.columns)
data = StringIO()
export_graphviz(classifier, out_file=data, filled=True, rounded=True,
                special_characters=True, feature_names=feature_names,
                class_names=['Not Child Friendly', 'Child Friendly'])
graph = pydotplus.graph_from_dot_data(data.getvalue())
Image(graph.create_png())
