# -*- coding: utf-8 -*-
"""Copy of ML_OEA_finalfinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PuYRDrE0kSBhAjeVHU7p66UlWiAYceMV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

! unzip "movies.zip"

df = pd.read_csv('imdb_top_1000.csv')

# Define target column based on Certificate
def is_child_friendly(Certificate):
    return 1 if Certificate in ['U', 'UA'] else 0

df['Is_child_friendly'] = df['Certificate'].apply(is_child_friendly)

# Clean 'Runtime' column
df['Runtime'] = df['Runtime'].str.replace(r'\s*mins?$', '', regex=True).astype(int)

print(df)

df.head()

x = df[['Runtime', 'Genre', 'IMDB_Rating']]
y = df['Is_child_friendly']

print(x)

print(y)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer

ct = ColumnTransformer(
    [('onehot', OneHotEncoder(sparse_output=False, handle_unknown='ignore'), ['Genre']),
     ('scaler', StandardScaler(), ['Runtime', 'IMDB_Rating'])],
    remainder='drop'
)

# Transform the data
x_train = ct.fit_transform(x_train)
x_test = ct.transform(x_test)

print(x_train)

print(x_test)

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

!pip install six
from six import StringIO
from IPython.display import Image
import pydotplus
from sklearn.tree import export_graphviz

onehot_columns = list(ct.named_transformers_['onehot'].get_feature_names_out(['Genre']))
numeric_features = ['Runtime', 'IMDB_Rating']
all_features = onehot_columns + numeric_features

data = StringIO()
export_graphviz(classifier, out_file=data, filled=True, rounded=True,
                special_characters=True, feature_names=all_features,
                class_names=['0', '1'])
graph = pydotplus.graph_from_dot_data(data.getvalue())
Image(graph.create_png())