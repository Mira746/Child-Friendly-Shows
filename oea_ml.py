# -*- coding: utf-8 -*-
"""OEA_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10nbmh3nBvD9VFWm3fvP687nBLKJUdhSr

**Import Necessary Libraries**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# --- SAME PREPROCESSING AS RANDOM FOREST ---
df = pd.read_csv("imdb_top_1000.csv")

# Drop unused columns
df = df.drop(['Poster_Link', 'Series_Title', 'Overview'], axis=1)

# Handle missing values
df = df.fillna(0)
df.fillna("Unknown", inplace=True)

# Create target column
child_friendly = ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'U']
df['is_child_friendly'] = df['Certificate'].apply(lambda x: 1 if x in child_friendly else 0)

# Features / Target
X = df.drop(['is_child_friendly','Certificate'], axis=1)
y = df['is_child_friendly']

# Clean Runtime
X['Runtime'] = X['Runtime'].astype(str).str.extract('(\d+)').astype(float)

# Clean Released Year
X['Released_Year'] = pd.to_numeric(X['Released_Year'], errors='coerce')

# Clean Gross
X['Gross'] = X['Gross'].astype(str).str.replace(',', '').str.replace('$', '').astype(float)

# One-hot encode
X_encoded = pd.get_dummies(X, drop_first=True)

# --- TRAIN / TEST SPLIT ---
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# --- LOGISTIC REGRESSION ---
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# --- METRICS ---
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Visualization (optional)
df['Runtime'] = df['Runtime'].astype(float)
sns.scatterplot(data=df, x='IMDB_Rating', y='Meta_score', hue='is_child_friendly', palette='coolwarm')
plt.title('IMDB Rating vs Meta Score by Child Friendliness')
plt.xlabel('IMDB Rating')
plt.ylabel('Meta Score')
plt.legend(title='Child Friendly')
plt.grid(True)
plt.show()
