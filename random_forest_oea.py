# -*- coding: utf-8 -*-
"""Random_Forest_OEA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13t1n1Vz73RaPTuiFo31L3po9r1NpqKsb
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score
! unzip "archive.zip"

# Load your dataset
df = pd.read_csv('imdb_top_1000.csv')

df.columns

# Basic preprocessing
df = df.drop(['Poster_Link', 'Series_Title', 'Overview'], axis=1)

# Handle missing values
df = df.fillna(0)

df.fillna("Unknown", inplace=True)

#def is_child_friendly(Certificate):
#    return 1 if Certificate in ['U', 'UA','G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7'] else 0
#df['Is_child_friendly'] = df['Certificate'].apply(is_child_friendly)
child_friendly = ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'U']
df['is_child_friendly'] = df['Certificate'].apply(lambda x: 1 if x in child_friendly else 0)

print(df['Certificate'].value_counts(dropna=False))

print(df.columns)

df['is_child_friendly'].value_counts()

df['is_child_friendly'].unique()

# Split data
X = df.drop(['is_child_friendly','Certificate'], axis=1)
y = df['is_child_friendly']

# Remove 'min' from Runtime and convert to int
X['Runtime'] = X['Runtime'].str.extract('(\d+)').astype(float)

# Released_Year cleanup (in case of 'PG' or junk)
X['Released_Year'] = pd.to_numeric(X['Released_Year'], errors='coerce')

# Remove commas and convert Gross to float
X['Gross'] = X['Gross'].str.replace(',', '').str.replace('$', '').astype(float)
X_encoded = pd.get_dummies(X, drop_first=True)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("Accuracy:", accuracy)

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

# Pick the first tree from the RandomForest
tree = rf.estimators_[0]

# Plot the tree
plt.figure(figsize=(15,10))
plot_tree(tree, filled=True, feature_names=X_encoded.columns, class_names=['Not Child-Friendly', 'Child-Friendly'], rounded=True)
plt.show()

# Example: Single feature vs categorical target
import seaborn as sns
# Convert 'Runtime' to numeric by removing 'min' and converting to int
df['Runtime'] = df['Runtime'].str.extract('(\d+)').astype(float)
sns.violinplot(x='is_child_friendly', y='Runtime', data=df)
plt.title('Runtime distribution across Child-Friendliness')
plt.xlabel('is_child_friendly')  # Label for x-axis
plt.ylabel('Runtime')  # Label for y-axis
plt.show()